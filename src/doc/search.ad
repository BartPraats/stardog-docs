= Search

intro...

== Indexing Strategy

The indexing strategy creates a "search document" per RDF literal. Each
document consists of the following fields: literal ID; literal value;
and contexts.

See <<User-defined Lucene Analyzer>> for details on customizing
Stardog's search programmatically.

== Maintaining Search Indexes

== Integration with SPARQL

We use the predicate `\http://jena.hpl.hp.com/ARQ/property#textMatch` to
access the search index in a SPARQL query.

The `textMatch` function has one required argument, the search query in Lucene
syntax. It also has two optional arguments. The first is the score threshold;
results whose score is *below* this number are not included in the results. The
second is the maximum number of results to return from Lucene. When not
specified, the default limit is `50`. When a `LIMIT` is specified in the SPARQL
query, it does not affect the full-text search, that only restricts the size of
the final result set.

For example,

[source,SPARQL]
----
SELECT DISTINCT ?s ?score
WHERE {
?s ?p ?l.
( ?l ?score ) <http://jena.hpl.hp.com/ARQ/property#textMatch> ( 'mac' 0.5 50 ).
}
----

This query selects the top 50 literals, and their scores, which match
'mac' and whose scores are above a threshold of 0.5. These literals are
then joined with the generic BGP `?s ?p ?l` to get the resources (?s)
that have those literals. Alternatively, you could use
`?s rdf:type ex:Book` if you only wanted to select the books which
reference the search criteria; you can include as many other BGPs as
you like to enhance your initial search results.

=== Escaping Characters in Search

The "/" character must be escaped because Lucene says so. In fact,
there are several characters that are part of Lucene's query syntax
that must be
http://lucene.apache.org/core/4_0_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#Escaping_Special_Characters[escaped].

== Search Syntax

Stardog search is based on Lucene 4.2.0: we support all of the
http://lucene.apache.org/core/4_2_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description[search modifiers]
that Lucene supports, with the exception of fields.

- wildcards: `?` and `*`
- fuzzy: `~` and `~` with similarity weights (e.g. `foo~0.8`)
- proximities: `"semantic web"~5`
- term boosting
- booleans: `OR`, `AND`, `NOT`, +`, and `-`.
- grouping

For a more detailed discussion, see the http://lucene.apache.org/core/4_2_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description[Lucene docs].

